
# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

AutoParts Pro is a vehicle inventory management system built as an Electron desktop app with React frontend and SQLite database. The app supports both offline operation and optional cloud sync via Supabase.

## Architecture

**Frontend**: React 18 with React Router for navigation, Tailwind CSS for styling, and Recharts for data visualization
**Backend**: Electron main process handles database operations and system integration
**Database**: SQLite3 for local storage, with optional Supabase PostgreSQL sync
**Build System**: React Scripts for frontend bundling, Electron Builder for desktop packaging

Key architectural patterns:
- Main Electron process (`electron/main.js`) manages database and system APIs
- Renderer process communicates via IPC through preload script (`electron/preload.js`)
- Database operations centralized in `electron/database.js`
- Cloud sync handled by `electron/supabase-sync.js`
- Pages follow consistent structure with hooks for database operations

## Development Commands

```bash
# Start development with hot reload
npm start

# Build React app for production
npm run build

# Test build without packaging
npm run electron-pack -- --dir

# Package for current platform
npm run electron-pack

# Package for specific platforms
npm run electron-pack:win    # Windows
npm run electron-pack:mac    # macOS  
npm run electron-pack:linux  # Linux

# Build and package
npm run dist

# Build for all platforms
npm run dist:all
```

## Database Architecture

**Local Database**: SQLite stored in OS-specific user data directory
- Parts table with pro_no, inventory tracking, pricing
- Job cards with customer info and parts usage
- Stock movements for inventory history
- Low stock alerts system
- Counters table for auto-incrementing numbers

**Schema Migration**: Handled by `electron/migrate-db.js` with version tracking

**Cloud Sync**: Optional Supabase integration
- Two-way sync between local SQLite and remote PostgreSQL
- Conflict resolution based on updated_at timestamps
- Auto-sync every 5 minutes when configured

## Key Components

**Database Layer** (`electron/database.js`): All SQL operations, table creation, data validation
**Sync Layer** (`electron/supabase-sync.js`): Cloud synchronization logic
**UI Components**: 
- Sidebar navigation with theme switching
- SyncStatus indicator for cloud connectivity
- Consistent form layouts across pages

## Native Dependencies

SQLite3 requires rebuilding for Electron:
```bash
npx electron-rebuild -f -w sqlite3
```

For distribution builds:
```bash
npm rebuild sqlite3 --runtime=electron --target=22.0.0 --dist-url=https://atom.io/download/electron
```

## Testing

Use `react-scripts test` for React component testing. No additional test frameworks configured.

## Database Access

Local database file location varies by OS - see DATABASE_MANAGEMENT.md for direct database access instructions and schema details.
